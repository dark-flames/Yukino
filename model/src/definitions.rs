use crate::annotations::IndexMethod;
use crate::types::DatabaseType;
use iroha::ToTokens;

/// Table type enumeration
#[derive(ToTokens)]
pub enum TableType {
    /// Table generated by entity, parameter is the path of entity
    NormalEntityTable(String),
    /// Table generated by association, parameter is the path of owner side entity and attachment side
    MembershipTable(String, String),
}

/// Table definition. Corresponds to a table in a database
#[derive(ToTokens)]
pub struct TableDefinition {
    /// table name
    pub name: String,
    /// table type
    pub ty: TableType,
    /// column definitions in table
    pub columns: Vec<ColumnDefinition>,
    /// index definitions in table
    pub indexes: Vec<IndexDefinition>,
    /// foreign keys in table
    pub foreign_keys: Vec<ForeignKeyDefinition>,
}

/// Column type enumeration
#[derive(ToTokens)]
pub enum ColumnType {
    /// Column generated by field of entity, parameter is the field name
    NormalColumn(String),
    /// Column in MembershipTable or other auto generated column
    VisualColumn,
}

/// Column definition. Corresponds to a column in a column of database
#[derive(ToTokens)]
pub struct ColumnDefinition {
    /// column name
    pub name: String,
    /// column type
    pub ty: ColumnType,
    /// data type of column
    pub data_type: DatabaseType,
    /// is unique column
    pub unique: bool,
    /// is auto increase key
    pub auto_increase: bool,
    /// is primary key
    pub primary_key: bool,
}

/// Index definition. Corresponds to a index of table database
#[derive(ToTokens)]
pub struct IndexDefinition {
    /// index name
    pub name: String,
    /// Index key part, list of column names
    pub columns: Vec<String>,
    /// Index method
    pub method: IndexMethod,
    /// is unique index
    pub unique: bool,
}

/// Foreign key definition. Corresponds to a foreign key of table database
#[derive(ToTokens)]
pub struct ForeignKeyDefinition {
    /// foreign key name
    pub name: String,
    /// foreign key part, list of column names
    pub columns: Vec<String>,
    /// reference table name
    pub reference_table: String,
    /// reference column name in reference table
    pub reference_columns: Vec<String>,
}
